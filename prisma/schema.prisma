// public
generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["multiSchema", "clientExtensions"]
    binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource postgres {
    provider = "postgres"
    url      = env("DB_URL")
    schemas  = ["public", "auth"]
}

model characters {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now()) @postgres.Timestamptz(6)
    updated_at DateTime @default(now()) @postgres.Timestamptz(6)
    user_id    String   @postgres.Uuid
    name       String
    avatar_src String
    prompt     String

    Chats     chats[]
    Templates templates[]

    @@schema("public")
}

model templates {
    id           Int      @id @default(autoincrement())
    created_at   DateTime @default(now()) @postgres.Timestamptz(6)
    updated_at   DateTime @default(now()) @postgres.Timestamptz(6)
    user_id      String   @postgres.Uuid
    character_id Int?
    title        String
    content      String

    Character characters? @relation(fields: [character_id], references: [id])

    @@schema("public")
}

model chats {
    id           Int      @id @default(autoincrement())
    created_at   DateTime @default(now()) @postgres.Timestamptz(6)
    updated_at   DateTime @default(now()) @postgres.Timestamptz(6)
    user_id      String   @postgres.Uuid
    character_id Int?

    Messages  messages[]
    Character characters? @relation(fields: [character_id], references: [id])

    @@schema("public")
}

model messages {
    id         Int      @id @default(autoincrement())
    created_at DateTime @default(now()) @postgres.Timestamptz(6)
    updated_at DateTime @default(now()) @postgres.Timestamptz(6)
    user_id    String   @postgres.Uuid
    chat_id    Int
    role       String
    content    String

    Chat chats @relation(fields: [chat_id], references: [id], onDelete: Cascade)

    @@schema("public")
}

model profiles {
    id             String    @id @unique @postgres.Uuid
    created_at     DateTime  @default(now()) @postgres.Timestamptz(6)
    updated_at     DateTime? @default(now()) @postgres.Timestamptz(6)
    username       String?   @unique
    avatar_url     String?
    openai_api_key String?

    User users @relation(fields: [id], references: [id])

    @@schema("public")
}

// auth
model users {
    id                String    @id @postgres.Uuid
    created_at        DateTime  @default(now()) @postgres.Timestamptz(6)
    updated_at        DateTime? @default(now()) @postgres.Timestamptz(6)
    email             String    @unique
    email_verified_at DateTime? @postgres.Timestamptz(6)
    password          String?
    remember_token    String?

    Profile profiles?

    @@schema("auth")
}
